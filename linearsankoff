#!/usr/bin/env python3

import gflags as flags
import subprocess
import sys
import os

FLAGS = flags.FLAGS

def setgflags():
    flags.DEFINE_float('w', 1, "weight of alignment")
    flags.DEFINE_integer('b', 100, "set beam size, (DEFAULT=100)")
    flags.DEFINE_integer('LFb', 100, "set beam size, (DEFAULT=100)")
    flags.DEFINE_integer('LAb', 100, "set beam size, (DEFAULT=100)")
    flags.DEFINE_boolean("astar", False, "use A star heuristic during beam search")
    flags.DEFINE_boolean("suffix", False, "use A star heuristic during beam search")
    flags.DEFINE_float("energyDiff", 0.3, "maximum energy difference")
    flags.DEFINE_boolean('verbose', False, "print out energy of each loop in the structure, (DEFAULT=FALSE)")
    # flags.DEFINE_boolean('dynalign', False, "use Dynalign deductive system, (DEFAULT=FALSE)")
    # flags.DEFINE_boolean('sharpturn', False, "enable sharp turn in prediction, (DEFAULT=FALSE)")
    
    argv = FLAGS(sys.argv)

def main():
    weight = str(FLAGS.w)
    beamsize = str(FLAGS.b)
    LFbeam = str(FLAGS.LFb)
    LAbeam = str(FLAGS.LAb)
    use_astar = '1' if FLAGS.astar else '0'
    use_suffix = '1' if FLAGS.suffix else '0'
    energy_diff = str(FLAGS.energyDiff)
    is_verbose = '1' if FLAGS.verbose else '0'

    # is_dynalign = '1' if FLAGS.dynalign else '0'
    # is_sharpturn = '1' if FLAGS.sharpturn else '0'

    path = os.path.dirname(os.path.abspath(__file__))

    # cmd = ["%s/%s" % (path, ('bin/linearsankoff' if not FLAGS.dynalign else 'bin/linearsankoff_dynalign')), weight, beamsize, LFbeam, LAbeam, use_astar, energy_diff, is_verbose]
    cmd = ["%s/%s" % (path, 'bin/linearsankoff'), weight, beamsize, LFbeam, LAbeam, use_astar, use_suffix, energy_diff, is_verbose]
    # print(cmd)
    subprocess.call(cmd, stdin=sys.stdin)
    
if __name__ == '__main__':
    setgflags()
    main()

